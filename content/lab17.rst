Базы данных
###########

:date: 2020-03-05 09:00
:summary: Работа с sqlite3
:status: draft

.. default-role:: code

.. contents:: Содержание

.. role:: python(code)
   :language: python

Базы данных и СУБД
------------------

Под **базой данных** (БД) понимается совокупность данных, систематизировааных таким образом, чтобы эти данные могли быть найдены и обработаны с помощью ЭВМ.
Вместе с понятием баз данных рассматривается понятие **системы управления базами данных** (СУБД).
СУБД – совокупность программных и лингвистических средств общего или специального назначения, обеспечивающих управление созданием и использованием баз данных.
Другими словами, это комплекс программ, позволяющих создать БД и манипулировать данными.
Система обес­пе­чи­ва­ет безо­пас­ность, на­дёж­ность хра­не­ния и це­ло­ст­ность дан­ных, а так­же пре­дос­тав­ля­ет сред­ст­ва для ад­ми­ни­ст­ри­ро­ва­ния БД.

Базы данных классифициурют по разным критериям.
Один из критериев – **модель данных** – абстрактное, самодостаточное, логическое определение объектов, операторов и прочих элементов, в совокупности составляющих абстрактную машину доступа к данным, с который взаимодействует пользователь.
Одна из распространенных на сегодняшний день моделей является **реляционная модель**.
В реляционных моделях баз данных широко используются три ключевых термина:

+ отношение – таблица со столбцам ии строками;
+ атрибуты – именованные столбцы отношения;
+ домен – набор значений, которые могут принимать атрибуты.

========== =========== ========
Банк. счет     ФИО     Сумма, $
---------- ----------- --------
32345194   Петров П.Н. 14850.3
74137395   Иванов Г.К. 20719.6
========== =========== ========

Выше представлена основная структура данных реляционной модели – таблица.
Информация о конкретном объекте представлена в строках (кортежах) и столбцах.
Реляционная БД представлена набором таких таблиц – отношений, каждое отношение пре­дс­тав­ля­ет собой набор кортежей.
В столбцах перечислены различные атрибуты объекта (в примере выше: банковский счет, ФИО владельца счета и сумма на счету).

Все отношения должны придерживаться некоторых правил.

1. Упорядочение столбцов не существенно в таблице.
2. В таблице не может быть одинаковых кортежей.
3. Каждый кортеж будет содержать одно значение для каждого из атрибутов.

Одна их сильных сторон реляционной модели заключается в том, что любое значение, имеющее место в двух разных записях (принадлежащих к одной таблице или к разным), подразумевает взаимосвязь между этими записями. Таблицы могут иметь назначенный единственный атрибут или набор атрибутов, которые могут действовать как **ключ**. Ключ используется для однозначной идентификации каждого кортежа в таблице. В примере выше «банковский счет» является ключом, т.к. это уникальный номер для каждого счета. Обычно ключи используют дял объединения данных из нескольких таблиц. Например¸ разобьем пример выше на две таблицы:

Осаток по счету:

========== ========
Банк. счет Сумма, $
---------- --------
32345194   14850.3
74137395   20719.6
========== ========

Информация о владельце:

========== ===========
Банк. счет     ФИО
---------- -----------
32345194   Петров П.Н.
74137395   Иванов Г.К.
========== ===========

В каждой из таблиц атрибут «банковский счет» является ключом, который связывает между собой кортежи из этих таблиц.

Язык запросов SQL и СУБД sqlite3
--------------------------------

.. TODO: possibly link to sqlite3.zip for win users

Наиболее распространенным языком запросов в реляционной модели является **язык структурированных запросов** (structured query language, SQL).
Для удобства последовательность ззапросов объединяют в скрипты с расширением sql.
Для обращения к БД нам понадобится клиентская часть СУБД.
Для этих целей в этом курсе используется компактная встраиваемая СУБД SQLite.
«Встраиваемая» означается, что SQLite не является клиент-серверным приложением.
Движок представляет собой библиотеку, с которой компонуется программа.
База данных, с которой работает программа, хранится на там же компьютере в единственном файле. Клиентской частью является кроссплатформенная утилита командной строки sqltie3.
Для работы с базой данных запустите утилиту, указав имя файла БД. Если файл не существует, то он будет создан

.. code-block:: sh

    sqlite3 test.db

Запустив утилиту, вы попадете в интерактивный режим. Все команды утилиты начинаются с точки. Ознакомиться со списком команд можно при помощи `.help`

.. code-block:: sqlite3

    sqlite> .help

Для завершения работы с утилитой введите `.quit` или сочетание клавиш `ctrl+D`.

Интерактивный режим утилиты позволяет как напрямую писать запросы на языке SQL, так и запускать на исполнение sql файлы. Для запуска файла используется команда `.read path/to/sql/file`.

Синтакис SQL
============

Первое – SQL не является регистрозависимым, однако все ключевые слова и функции принято писать заглавными буквами, а названия таблиц и атрибутов – маленькими.
Второе – комментарии. SQL поддерживает 2 типа комментариев: начинающиеся с `--` и C-style комментарии `/* */`, которые могут быть многострочными.
Третье – все выражения начинаются с ключевого слова и оканчиваются `;`.

Типы данных
===========

SQLite поддерживает следующие типы данных:

+ NULL – пустое значение;
+ INTEGER – 1, 2, 3, 4, 6 или 8 байтное знаковое число;
+ REAL – 8-байтное число с плавающей запятой;
+ TEXT – строка в кодировке UTF-8, UTF-16BE или UTF-16LE (зависит от базы данных);
+ BLOB – массив двоичных данных, обычно нужен для хранения мультимедийных объектов и скомпилированного программного кода.

В файле ниже есть таблица со всеми ключевыми словами для каждого типа данных и их описания.
.. TODO: add pdf with data types table

Создание и удаление таблиц
==========================

Для создания таблицы используется команда `CREATE TABLE`. Общий синтаксис команды:

.. code-block:: sqlite3

    CREATE TABLE table_name(
        column1 datatype,
        column2 datatype,
        column3 datatype,
        .....
        columnN datatype,
        PRIMARY KEY( one or more columns )
    );

