Базы данных
###########

:date: 2020-03-05 09:00
:summary: Работа с sqlite3
:status: draft

.. default-role:: code

.. contents:: Содержание

.. role:: python(code)
   :language: python

Базы данных и СУБД
------------------

Под **базой данных** (БД) понимается совокупность данных, систематизированных таким образом,
чтобы эти данные могли быть найдены и обработаны с помощью ЭВМ.
Вместе с понятием баз данных рассматривается понятие **системы управления базами данных** (СУБД).
СУБД – совокупность программных и лингвистических средств общего или специального назначения,
обеспечивающих управление созданием и использованием баз данных.
Другими словами, это комплекс программ, позволяющих создать БД и манипулировать данными.
Система обес­пе­чи­ва­ет безо­пас­ность, на­дёж­ность хра­не­ния и це­ло­ст­ность дан­ных,
а так­же пре­дос­тав­ля­ет сред­ст­ва для ад­ми­ни­ст­ри­ро­ва­ния БД.

Базы данных классифициурют по разным критериям.
Один из критериев – **модель данных** – абстрактное, самодостаточное, логическое определение
объектов, операторов и прочих элементов, в совокупности составляющих абстрактную машину доступа к
данным, с который взаимодействует пользователь.
Одна из распространенных на сегодняшний день моделей является **реляционная модель**.
В реляционных моделях баз данных широко используются три ключевых термина:

+ отношение – таблица со столбцам ии строками;
+ атрибуты – именованные столбцы отношения;
+ домен – набор значений, которые могут принимать атрибуты.

========== =========== ========
Банк. счет     ФИО     Сумма, $
---------- ----------- --------
32345194   Петров П.Н. 14850.3
74137395   Иванов Г.К. 20719.6
========== =========== ========

Выше представлена основная структура данных реляционной модели – таблица.
Информация о конкретном объекте представлена в строках (кортежах) и столбцах.
Реляционная БД представлена набором таких таблиц – отношений, каждое отношение пре­дс­тав­ля­ет
собой набор кортежей.
В столбцах перечислены различные атрибуты объекта (в примере выше: банковский счет, ФИО владельца
счета и сумма на счету).

Все отношения должны придерживаться некоторых правил.

1. Упорядочение столбцов не существенно в таблице.
2. В таблице не может быть одинаковых кортежей.
3. Каждый кортеж будет содержать одно значение для каждого из атрибутов.

Одна их сильных сторон реляционной модели заключается в том, что любое значение, имеющее место в
двух разных записях (принадлежащих к одной таблице или к разным), подразумевает взаимосвязь между
этими записями.
Таблицы могут иметь назначенный единственный атрибут или набор атрибутов, которые могут действовать
как **ключ**. Ключ используется для однозначной идентификации каждого кортежа в таблице.
В примере выше «банковский счет» является ключом, т.к. это уникальный номер для каждого счета.
Обычно ключи используют дял объединения данных из нескольких таблиц.
Например¸ разобьем пример выше на две таблицы:

Осаток по счету:

========== ========
Банк. счет Сумма, $
---------- --------
32345194   14850.3
74137395   20719.6
========== ========

Информация о владельце:

========== ===========
Банк. счет     ФИО
---------- -----------
32345194   Петров П.Н.
74137395   Иванов Г.К.
========== ===========

В каждой из таблиц атрибут «банковский счет» является ключом, который связывает между собой кортежи
из этих таблиц.

Язык запросов SQL и СУБД sqlite3
--------------------------------

.. TODO: possibly link to sqlite3.zip for win users

Наиболее распространенным языком запросов в реляционной модели является **язык структурированных
запросов** (structured query language, SQL).
Для удобства последовательность ззапросов объединяют в скрипты с расширением sql.
Для обращения к БД нам понадобится клиентская часть СУБД.
Для этих целей в этом курсе используется компактная встраиваемая СУБД SQLite.
«Встраиваемая» означается, что SQLite не является клиент-серверным приложением.
Движок представляет собой библиотеку, с которой компонуется программа.
База данных, с которой работает программа, хранится на там же компьютере в единственном файле.
Клиентской частью является кроссплатформенная утилита командной строки sqltie3.
Для работы с базой данных запустите утилиту, указав имя файла БД. Если файл не существует,
то он будет создан

.. code-block:: sh

    sqlite3 test.db

Запустив утилиту, вы попадете в интерактивный режим. Все команды утилиты начинаются с точки.
Ознакомиться со списком команд можно при помощи `.help`

.. code-block:: sqlite3

    sqlite> .help

Для завершения работы с утилитой введите `.quit` или сочетание клавиш `ctrl+D`.

Интерактивный режим утилиты позволяет как напрямую писать запросы на языке SQL, так и запускать на
исполнение sql файлы. Для запуска файла используется команда `.read path/to/sql/file`.

Для удобвства используйте команды

.. code-block:: sqlite3

    sqlite> .mode column
    sqlite> .headers on

Это позволит отображать результаты запросов в виде выравненных таблиц с названиями столбцов.

Синтакис SQL
============

Первое – SQL не является регистрозависимым, однако все ключевые слова и функции принято писать
заглавными буквами, а названия таблиц и атрибутов – маленькими.
Второе – комментарии. SQL поддерживает 2 типа комментариев: начинающиеся с `--` и C-style
комментарии `/* */`, которые могут быть многострочными.
Третье – все выражения начинаются с ключевого слова и оканчиваются `;`.

Типы данных
===========

.. TODO: add info about datetime

SQLite поддерживает следующие типы данных:

+ NULL – пустое значение;
+ INTEGER – 1, 2, 3, 4, 6 или 8 байтное знаковое число;
+ REAL – 8-байтное число с плавающей запятой;
+ TEXT – строка в кодировке UTF-8, UTF-16BE или UTF-16LE (зависит от базы данных);
+ BLOB – массив двоичных данных, обычно нужен для хранения мультимедийных объектов и
  скомпилированного программного кода.

В отличие от других СУБД, SQLite не поддерживает явного указания размера целого числа.
Использование типов данных с указанием размера автоматически приводится к INTEGER.
Для текстовых типов данных происходит аналогичное приведение к TEXT, а указанное ограничение на
длину текста опускается.

Создание, удаление и изменение таблиц
=====================================

Для создания таблицы используется команда `CREATE TABLE`. Общий синтаксис команды:

.. code-block:: sql

    CREATE TABLE table_name(
        column1 datatype PRIMARY KEY,
        column2 datatype,
        column3 datatype,
        .....
        columnN datatype
    );

Обратите внимание, что в таблице хотя бы один атрибут должен быть ключом.
Рассмотрим несколько примеров

.. code-block:: sql

    CREATE TABLE company(
        id INT,
        name TEXT,
        age INT,
        address TEXT,
        salary REAL
    );

    CREATE TABLE department(
        id INT,
        dept TEXT,
        emp_id INT
    );

Данный запрос создаст простую таблицу, состоящую из 5 столбцов.
Если в процессе работы вам необходимо удалить созданную таблицу, воспользуйтесь запросом

.. code-block:: sql

    DROP TABLE company;

Однако, прежде чем перейти к заполнению заполнению, рассмотрим различные параметры, которые можно
навесить на таблицу и ее атрибуты.

+ NOT NULL указывает на то, что атрибут не может иметь пустое значение;
+ DEFAULT позволяет задать атрибуту значение по умолчанию;
+ UNIQUE делает значения атрибутов уникальным для каждой строки;
+ PRIMARY KEY однозначно определяет каждую строку (может быть указан только у одного атрибута);
+ FOREIGN KEY связывает столбец одной таблицы со столбцом другой таблицы;
+ AUTOINCREMENT автоматически задает атриубуту увеличивающееся значение;
+ CHECK проверяет, что значения атрибута удовлетворяют логическому выражению.

Модифицируем наши таблицы.

.. code-block:: sql

    CREATE TABLE company(
        id INT PRIMARY KEY NOT NULL,
        name TEXT NOT NULL,
        age INT NOT NULL,
        address TEXT,
        salary REAL DEFAULT 30000 CHECK(salary >= 0)
    );

    CREATE TABLE department(
        id INT PRIMARY KEY NOT NULL,
        dept TEXT NOT NULL,
        emp_id INT NOT NULL,
        FOREIGN KEY (emp_id) REFERENCES company (id)
    );

Заметьте, что теперь department.emp_id и company.id связаны, и department.emp_id может содержать
только те значения, что есть в company.id.

Для изменения таблицы есть команда `ALTER TABLE`.
В SQLite поддерживается 2 варианта: переименование таблицы и добавление столбца.

.. code-block:: sql

    ALTER TABLE old_table RENAME TO new_table;

    ALTER TABLE table_name ADD COLUMN column_definition;

Добавленный столбец не может быть `UNIQUE` или `PRIMARY KEY`. Если он `NOT NULL`, то обязательно
должны быть указаны значения по умолчанию.

Добавление строк
================

Для вставки строки используется `INSERT`.

.. code-block:: sql

    INSERT INTO table_name (column1, column2, ...)
    VALUES
        (value1, value2, ...),
        ...
        (value1, value2, ...);

Приведенный выше синтаксис позволяет вставить несколько строк с заданными значениями атрибутов.
`(column1, column2, ...)` указывает, для каких атрибутов задаются значения. Если задаются значения
для всех атрибутов, то `(column1, column2, ...)` можно опустить.

.. code-block:: sql

    INSERT INTO company
    VALUES
        (1, 'Paul', 32, 'California', 20000.00),
        (2, 'Allen', 25, 'Texas', 15000.00),
        (3, 'Teddy', 23, 'Norway', 20000.00),
        (4, 'Mark', 25, 'Rich-Mond ', 65000.00),
        (5, 'David', 27, 'Texas', 85000.00),
        (6, 'Kim', 22, 'South-Hall', 45000.00);

    INSERT INTO department
    VALUES
        (1, 'IT Billing', 1),
        (2, 'Engineering', 2),
        (3, 'Finance', 7);

Запрос SELECT
=============

Запрос `SELECT` позволяет получить выборку данных из одной или нескольких таблиц. Кроме того
`SELECT` можно использовать для вычислений.

.. code-block:: sql

    SELECT 1 + 1;
    SELECT 10 / 5, 2 * 4;

Обычно запрос используется для получения данных из таблицы. Общий вид запроса следующий:

.. code-block:: sql

    SELECT DISTINCT column_list
    FROM table_list
        JOIN table_name ON join_condition
    WHERE row_filter
    ORDER BY column_list
    LIMIT count OFFSET offset
    GROUP BY column_name
    HAVING group_filter;

`SELECT` является самым сложным запросом. Для простоты понимания разберем выражение постепенно.

.. code-block:: sql

    SELECT name, salary FROM company;

Такой запрос создаст временную таблицу из столбцов company.name и company.salary, заполнив ее
значениями из таблицы company. Если нам необходимо просмотреть данные всех столбцов, то список
стобцов заменяется на `*`.

.. code-block:: sql

    SELECT * FROM company;

`ORDER BY` позволяет отсортировать данные.

.. code-block:: sql

    SELECT name, age, salary
    FROM company
    ORDER BY
        age ASC,
        salary DESC;

`ASC` и `DES` означают сортировку по возрастанию и убыванию соотвественно.

`DISTINCT` убирает дублирующиеся строки. Сравните результаты двух запросов.

.. code-block:: sql

    SELECT age FROM company;
    SELECT DISTINCT age FROM company;


