Первое знакомство с языком C в GNU/Linux
###############################

::date: 2018-09-09 01:15

.. default-role:: code
.. contents:: Содержание

Введение
========

Язык C как и язык C++ является *компилируемым*, то есть трансляция кода с языка выского уровня на инструкции машинного кода происходит не в момент выполнения, а заранее - в процессе изготовления так называемого *исполняемого файла* (в ОС Windows такие файлы имеют расширение `.exe`, а в ОС GNU/Linux чаще всего не имеют расширения).

HelloWorld.c
------------

Пример простой программы на C, которая печатает "Привет, Мир! MIPT 2018.":

.. code-block:: c

        #include <stdio.h>
        /* Пример простой программы */
        int main()
        {
                int year;
                year=2018;
                printf("Hello, World! MIPT %d.\n", year)
                return 0;
        }

Теперь детально рассмотрим нашу первую программу.
        
Первая строка:

.. code-block:: c

        #include <stdio.h>

Она сообщает компилятору о необходимости подключить файл `stdio.h`. Этот файл содержит информацию, необходимую для правильного выполнения функций библиотеки стандартного ввода/вывода языка C.

Вторая строка:

.. code-block:: c
        
        /* Пример простой программы */

является комментарием.
Комментарием в языке C является любая последовательность символов, заключенная между парами символов `/*` и `*/`.
Также, все символы, располагающиеся за парой символов `//` и до конца строки, рассматриваются как комментарий.

Строка

.. code-block:: c

        int main()

Определяет *тип* и имя *функции*. `int` означает, что функция после того как отработает должна вернуть целочисленный тип данных, а `main` - имя функции.

Всё дело в том, что все исполняемые операторы в программах на C и C++ не могут существовать сами по себе - они должны быть обязательно заключены в *функции*.

Функция `main()` - это *главная функция*, выполнение программы начинается с её вызова и заканчивается выходом из неё. Возвращаемое значение `int main()` в случае успешных вычислений должно быть равно 0, что означает "ошибка номер ноль", то есть "нет ошибки". В противном процесс, вызвавший программу, может посчитать её выполнившейся с ошибкой.
Все *тела* функций заключаются в парные фигурные скобки `{}`.

Строка

.. code-block:: c

        int year;

Объявляет переменную, называемую year, и сообщает компилятору, что эта переменная целая. В языке C все переменные должны быть объявлены прежде, чем они будут использованы. Процесс объявления переменных включает в себя определение имени (идентификатора) переменных (year) и указание типа переменных (int).

Строка

.. code-block:: c

        year=2018;

является оператором присваивания. В этой строке переменной с именем `year` присваивается значение 2018.

Также стоит отметить, что все операторы в языке C заканчиваются символом "точка с запятой".

Строка

.. code-block:: c

        printf("Hello, World! MIPT %d.\n", year);

является вызовом стандартной функции `printf()`, которая выводит на экран некоторую информацию. Эта строка состоит из двух частей: имени функции `printf()` и двух ее аргументов "Hello, World! MIPT %d.\n" и year, разделенных запятой.

Первый аргумент функции `pintf()` - это строка в кавычках "Hello, World! MIPT %d.\n", которую иногда называют *управляющей строкой*. Эта строка может содержать любые символы или *спецификации формата*, начинающиеся с символа `%`. Обычные символы просто отображаются на экране в том порядке, в котором они следуют.

Спецификация формата, начинающаяся с символа `%`, указывает формат, в котором будет выводиться значение переменной year, являющейся вторым аргументом функции `printf()`. Спецификация `%d` указывает, что будет выводиться целое число в десятичной записи. Комбинация символов `\n` сообщает функции `printf()` о необходимости перехода на новую строку(символ новой строки).
